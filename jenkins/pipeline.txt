pipeline {
    agent any
    environment { // Global
        NUMBER_OF_SLAVES = 1
    }
    stages {
        stage('Get latest Build from repository') {
            steps {
                echo 'Pulling latest script from GIT'
                git 'https://github.com/thiswebs4u/jmeter.git'
            }
        }
		stage('Clean up existing data') {
			steps {
//			      sh 'cd `pwd`/kubernetes-init/; ls; kubectl delete -R -f config;'
			      dir('data') {
			            sh 'kubectl cp `pwd`/script.jmx jmp:/etc/jmeter'
			            sh 'kubectl exec pod/jmp -- mkdir -p /etc/jmeter/logs'
			            sh 'kubectl exec pod/jmp -- mkdir -p /etc/jmeter/results'
			            sh 'kubectl exec pod/jmp -- chown root:root -R /etc/jmeter'
			            sh 'kubectl exec pod/jmp -- chmod 777 -R /etc/jmeter'  // Just for now

			            //sh 'kubectl exec pod/jmp -- chown root:root /etc/jmeter/script.jmx'
			            //sh 'kubectl exec pod/jmp -- chown root:root /etc/jmeter'
			            //sh 'kubectl exec pod/jmp -- chown root:root /etc/jmeter/logs'
			            //sh 'kubectl exec pod/jmp -- chown root:root /etc/jmeter/results'
			      }
			      dir('kubernetes-init/config') {
			            sh 'rm -rf *'
			      }
			}
		}
        stage('Build Kubernetese Config') {
            steps {
                sh 'mkdir -p `pwd`/kubernetes-init/data/;'
                sh 'cp `pwd`/data/script.jmx `pwd`/kubernetes-init/data/script.jmx;'
                sh 'cd `pwd`/kubernetes-init/;'
                sh 'echo pwd=`pwd`;'
                sh 'chmod 775 `pwd`/kubernetes-init/create.sh;'
                sh '`pwd`/kubernetes-init/create.sh $NUMBER_OF_SLAVES script.jmx'
                sh 'mkdir -p `pwd`/kubernetes-init/data/logs/;'
                sh 'mkdir -p `pwd`/kubernetes-init/data/results/;'
                echo 'kubernetes configuration for Jmeter Masters and Slaves created successfully'
                //echo "current build number: ${currentBuild.number}"
            }
        }
        stage('Deploying Jmeter Slave Pods') {
            steps {
				sh 'cd `pwd`/kubernetes-init/config/; ls; i=1;while [ "$i" -le $NUMBER_OF_SLAVES ]; do kubectl apply -f slave$i.yaml; i=$(( i + 1 )); done'
				sh 'sleep 60;'
                echo 'Started Jmeter Slave Pods'
            }
        }
		stage('Deploying JMeter Master and Start Test') {
            steps {
				echo 'Starting Execution'
                sh 'cd `pwd`/kubernetes-init/config/; kubectl apply -f master.yaml'
                sh 'sleep 60;'
				sh 'kubectl logs $(kubectl get pods --selector=job-name=master --output=jsonpath=\'{.items[*].metadata.name}\') -f'

            }
        }
        stage('Stopping Jmeter Pods') {
            steps {
                sh 'cd `pwd`/kubernetes-init/config/; ls; kubectl delete -f .;'
                sh 'echo pwd=`pwd`'
                echo 'Stopping Jmeter Pods'
            }
        }
		stage('Archive data') {
			steps {
				dir('kubernetes-init/data') {
				    sh 'kubectl cp jmp:/etc/jmeter .'
					archiveArtifacts artifacts: '**'
				}
			}
		}
    }
}